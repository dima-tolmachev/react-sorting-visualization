{"version":3,"sources":["components/line.tsx","components/lines.tsx","components/submenu/arrayRange.tsx","components/submenu/arrayColor.tsx","components/submenu/sortMethod.tsx","components/submenu/actions.tsx","components/main.tsx","App.tsx","index.tsx"],"names":["Line","this","props","value","color","position","id","style","flex","height","backgroundColor","Component","generateRandomArray","n","ans","i","push","Math","floor","random","sleep","ms","Promise","res","setTimeout","Lines","state","consequence","cnt","bubbleSorting","a","arr","length","j","bubble","sqrt","setState","selectionSorting","min","tmp","quickSorting","quickSort","that","len","left","right","sortedArr","pivot","pop","inProgress","concat","unshift","mergeSorting","mergeSort","merge","leftInd","rightInd","slice","mid","cm","gna","top","marginRight","onClick","display","gap","marginTop","map","val","ArrayRange","crv","hrc","fontWeight","for","onChange","bind","type","defaultValue","max","step","width","name","ArrayColor","cc","hcc","onChangeComplete","SortMethod","hmc","Actions","hr","bottom","event","window","location","href","Main","currentRangeValue","parseInt","localStorage","getItem","isOpen","genNewAsked","currentMode","toggle","handleColorChange","setItem","hex","handleRangeChange","e","currentTarget","handleModeChange","handleReset","genNewAksed","reload","flexDirection","marginLeft","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af24b167.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\ntype Props = {\n    value: number,\n    color: string,\n    position: string\n};\n\nclass Line extends Component<Props> {\n\n  render() {\n    const { value, color, position } = this.props;\n\n    return (\n        <div id={position} style={{ flex:\"1\", height: `${value}%`, backgroundColor: color }}></div>\n    );\n  }\n}\n\nexport default Line;\n","import React, { Component } from \"react\";\nimport Line from \"./line\";\nimport { Button } from \"reactstrap\";\n\nfunction generateRandomArray(n: number): number[] {\n  var ans: number[] = [];\n\n  for (let i: number = 0; i < n; i++) {\n    ans.push(Math.floor(Math.random() * 95) + 5);\n  }\n\n  return ans;\n}\n\nfunction sleep(ms: number) {\n  return new Promise((res) => setTimeout(res, ms));\n}\n\ntype Props = {\n  cnt: number;\n  color: string;\n  cm: string;\n  gna: boolean;\n};\n\nclass Lines extends Component<Props> {\n  state = {\n    consequence: generateRandomArray(this.props.cnt),\n  };\n\n  bubbleSorting = async () => {\n    var arr: number[] = this.state.consequence;\n\n    for (let i: number = 0; i < arr.length; i++) {\n      for (let j: number = 0; j < arr.length; j++) {\n        if (arr[j] > arr[j + 1]) {\n          let bubble: number = arr[j];\n          arr[j] = arr[j + 1];\n          arr[j + 1] = bubble;\n        }\n\n        await sleep(Math.sqrt(arr.length ** 3));\n        this.setState({ consequence: arr });\n      }\n    }\n  };\n\n  selectionSorting = async () => {\n    var arr: number[] = this.state.consequence;\n\n    for (let i: number = 0; i < arr.length; i++) {\n      let min: number = i;\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] < arr[min]) {\n          min = j;\n        }\n      }\n      if (min !== i) {\n        let tmp: number = arr[i];\n        arr[i] = arr[min];\n        arr[min] = tmp;\n      }\n      \n      await sleep(Math.sqrt(arr.length ** 3));\n      this.setState({ consequence: arr });\n    }\n  };\n\n  quickSorting = async () => {\n    this.setState({ \n      consequence: await quickSort(\n        this.state.consequence,\n        this,\n        this.state.consequence.length\n      )});\n\n    async function quickSort(arr: number[], that: any, len: number): Promise<number[]> {\n      if (arr.length <= 1) {\n        return arr;\n      } else {\n        var left: number[] = [];\n        var right: number[] = [];\n        var sortedArr: number[] = [];\n        var pivot: any = arr.pop();\n\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i] <= pivot) {\n            left.push(arr[i]);\n          } else {\n            right.push(arr[i]);\n          }\n        }\n\n        var inProgress: number[] = left.concat(pivot, right);\n        if (inProgress.length !== len) {\n          await sleep(Math.sqrt(len ** 3));\n          for (let i = 0; inProgress.length < len; i++) {\n            inProgress.unshift(1);\n            if (inProgress.length !== len) {\n              inProgress.push(1);\n            }\n          }\n          that.setState({ consequence: inProgress });\n        }\n\n        return sortedArr.concat(\n          await quickSort(left, that, len),\n          pivot,\n          await quickSort(right, that, len)\n        );\n      }\n    }\n  };\n\n  mergeSorting = async () => {\n    var res = await mergeSort(this.state.consequence, this, this.state.consequence.length);\n    this.setState({ consequence: res });\n\n    async function mergeSort(arr: number[], that: any, len: number): Promise<number[]> {\n      if (arr.length <= 1) return arr;\n\n      var mid: number = Math.floor(arr.length / 2);\n      var left: number[] = arr.slice(0, mid);\n      var right: number[] = arr.slice(mid);\n\n      return await merge(await mergeSort(left, that, len), await mergeSort(right, that, len), that, len);\n    }\n\n    async function merge(left: number[], right: number[], that: any, len: number): Promise<number[]> {\n      var sortedArr: number[] = [];\n      var leftInd: number = 0;\n      var rightInd: number = 0;\n\n      while (leftInd < left.length && rightInd < right.length) {\n        if (left[leftInd] < right[rightInd]) {\n          sortedArr.push(left[leftInd]);\n          leftInd++;\n        } else {\n          sortedArr.push(right[rightInd]);\n          rightInd++;\n        }\n\n        var inProgress: number[] = sortedArr.concat();\n        if (inProgress.length !== len) {\n          await sleep(Math.sqrt(len ** 3));\n          for (let i = 0; inProgress.length < len; i++) {\n            inProgress.unshift(1);\n            if (inProgress.length !== len) {\n              inProgress.push(1);\n            }\n          }\n          that.setState({ consequence: inProgress });\n        }\n      }\n\n      return sortedArr.concat(left.slice(leftInd)).concat(right.slice(rightInd));\n    }\n  };\n\n  render() {\n    const { cnt, color, cm, gna } = this.props;\n    const { consequence } = this.state;\n\n    if (consequence.length !== this.props.cnt || gna) {\n      this.setState({ consequence: generateRandomArray(cnt) });\n    }\n\n    if (cm === 'Selection') {\n      return (\n        <div>\n          <div style={{ position: \"absolute\", right: \"1px\", top: \"15px\" }}>\n            <Button\n              style={{ marginRight: \"5px\" }}\n              color=\"primary\"\n              onClick={this.selectionSorting}\n            >\n               Start selection sorting\n            </Button>\n          </div>\n  \n          <div\n            style={{\n              display: \"flex\",\n              gap: \"1%\",\n              height: \"75vh\",\n              marginTop: \"1em\",\n            }}\n          >\n            {consequence.map((val: number, i: number) => (\n              <Line key={i} value={val} position={\"1\"} color={color} />\n            ))}\n          </div>\n        </div>\n      );\n    } else if (cm === 'Quick') {\n      return (\n        <div>\n          <div style={{ position: \"absolute\", right: \"1px\", top: \"15px\" }}>\n            <Button\n              style={{ marginRight: \"5px\" }}\n              color=\"primary\"\n              onClick={this.quickSorting}\n            >\n              Start quick sorting\n            </Button>\n          </div>\n  \n          <div\n            style={{\n              display: \"flex\",\n              gap: \"1%\",\n              height: \"75vh\",\n              marginTop: \"1em\",\n            }}\n          >\n            {consequence.map((val: number, i: number) => (\n              <Line key={i} value={val} position={\"1\"} color={color} />\n            ))}\n          </div>\n        </div>\n      );\n    } else if (cm === 'Merge') {\n      return (\n        <div>\n          <div style={{ position: \"absolute\", right: \"1px\", top: \"15px\" }}>\n            <Button\n              style={{ marginRight: \"5px\" }}\n              color=\"primary\"\n              onClick={this.mergeSorting}\n            >\n               Start merge sorting\n            </Button>\n          </div>\n  \n          <div\n            style={{\n              display: \"flex\",\n              gap: \"1%\",\n              height: \"75vh\",\n              marginTop: \"1em\",\n            }}\n          >\n            {consequence.map((val: number, i: number) => (\n              <Line key={i} value={val} position={\"1\"} color={color} />\n            ))}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div style={{ position: \"absolute\", right: \"1px\", top: \"15px\" }}>\n            <Button\n              style={{ marginRight: \"5px\" }}\n              color=\"primary\"\n              onClick={this.bubbleSorting}\n            >\n               Start bubble sorting\n            </Button>\n          </div>\n  \n          <div\n            style={{\n              display: \"flex\",\n              gap: \"1%\",\n              height: \"75vh\",\n              marginTop: \"1em\",\n            }}\n          >\n            {consequence.map((val: number, i: number) => (\n              <Line key={i} value={val} position={\"1\"} color={color} />\n            ))}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Lines;\n","import React, { Component } from \"react\";\nimport { Label } from \"reactstrap\";\n\ntype Props = {\n  crv: number;\n  hrc: Function;\n}\n\n\nclass ArrayRange extends Component<Props> {\n\n  render() {\n    const { crv,  hrc} = this.props;\n    \n    return (\n      <div>\n        <div>\n          <Label style={{ fontWeight: \"bold\" }} for=\"range\">\n            There are {crv} elements to sort\n          </Label>\n          <p>\n            Sorting speed is equal to the square of cubed amount of elements divided by second.\n          </p>\n          <input\n            onChange={hrc.bind(this)}\n            type={\"range\"}\n            min={5}\n            defaultValue={crv}\n            max={35}\n            step={5}\n            style={{ width: \"100%\" }}\n            name=\"range\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ArrayRange;","import React, { Component } from \"react\";\nimport { Label } from \"reactstrap\";\nimport { CirclePicker } from \"react-color\";\n\ntype Props = {\n  cc: any;\n  hcc: Function;\n};\n\nclass ArrayColor extends Component<Props> {\n  render() {\n    const { cc, hcc } = this.props;\n\n    return (\n      <div>\n        <Label style={{ fontWeight: \"bold\" }}>Choose color for elements</Label>\n        <p>\n          This parameter does not affect the logic of any sorting algorithms.\n        </p>\n        <CirclePicker color={cc} onChangeComplete={hcc.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default ArrayColor;\n","import React, { Component } from \"react\";\nimport { Label, Input } from \"reactstrap\";\n\ntype Props = {\n  cm: string;\n  hmc: Function;\n};\n\nclass SortMethod extends Component<Props> {\n  render() {\n    const { cm, hmc } = this.props;\n\n    return (\n      <div>\n        <Label style={{ fontWeight: \"bold\" }}>Choose sorting method</Label>\n        <Input onChange={hmc.bind(this)} defaultValue={cm} name=\"select\" type=\"select\">\n          <option>Selection</option>\n          <option>Bubble</option>\n          <option>Quick</option>\n          <option>Merge</option>\n        </Input>\n      </div>\n    );\n  }\n}\n\nexport default SortMethod;\n","import React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\n\n\ntype Props = {\n    hr: Function;\n};\n\nclass Actions extends Component<Props> {\n    render() {\n        const { hr } = this.props; \n        \n        return (\n          <div style={{display:\"flex\", position:\"absolute\", width:\"100%\", gap: \"1%\", left:\"0\", bottom:\"10px\"}}>\n            <Button color=\"primary\" style={{flex:\"1\"}} onClick={hr.bind(this)}>Reset</Button>\n            <Button color=\"primary\" style={{flex:\"1\"}} onClick={event =>  window.location.href='https://github.com/dima-tolmachev/react-sorting-visualization'} >Source code</Button>\n          </div>\n        );\n  }\n}\n\nexport default Actions;","import React, { ChangeEvent, Component } from \"react\";\nimport Lines from \"./lines\";\nimport { Button, Offcanvas, OffcanvasHeader, OffcanvasBody } from \"reactstrap\";\nimport ArrayRange from \"./submenu/arrayRange\";\nimport ArrayColor from \"./submenu/arrayColor\";\nimport SortMethod from \"./submenu/sortMethod\";\nimport { ColorResult } from \"react-color\";\nimport Actions from \"./submenu/actions\";\n\nclass Main extends Component {\n  state = {\n    currentRangeValue: parseInt(localStorage.getItem(\"length\")!) || 20,\n    color: localStorage.getItem(\"color\") || \"#3f51b5\",\n    isOpen: false,\n    genNewAsked: false,\n    currentMode: localStorage.getItem(\"mode\") || \"Selection\",\n  };\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  };\n\n  handleColorChange = (color: ColorResult) => {\n    localStorage.setItem(\"color\", color.hex);\n    this.setState({ color: color.hex });\n  };\n\n  handleRangeChange = (e: ChangeEvent<HTMLInputElement>) => {\n    localStorage.setItem(\"length\", e.currentTarget.value);\n    this.setState({ currentRangeValue: parseInt(e.currentTarget.value) });\n  };\n\n  handleModeChange = (e: ChangeEvent<HTMLInputElement>) => {\n    localStorage.setItem(\"mode\", e.currentTarget.value);\n    this.setState({ currentMode: e.currentTarget.value });\n  };\n\n  handleReset = (e: ChangeEvent<HTMLInputElement>) => {\n    localStorage.setItem(\"mode\", \"Selection\");\n    localStorage.setItem(\"length\", \"20\");\n    localStorage.setItem(\"color\", \"#3f51b5\");\n    this.setState({\n      currentRangeValue: 20,\n      color: \"#3f51b5\",\n      isOpen: false,\n      currentMode: \"Selection\",\n      genNewAksed: true\n    });\n    \n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div>\n          <div style={{ width: \"100%\", display: \"flex\", marginTop: \"15px\" }}>\n            <div style={{ marginLeft: \"1px\" }}>\n              <Button color=\"primary\" onClick={this.toggle}>\n                Settings\n              </Button>\n            </div>\n            <div style={{ flex: \"10\" }}></div>\n            <div style={{ marginRight: \"15px\", display: \"flex\" }}></div>\n          </div>\n          <Offcanvas isOpen={this.state.isOpen}>\n            <OffcanvasHeader toggle={this.toggle}>Settings</OffcanvasHeader>\n            <OffcanvasBody>\n              <ArrayRange\n                crv={this.state.currentRangeValue}\n                hrc={this.handleRangeChange}\n              />\n              <br />\n              <ArrayColor cc={this.state.color} hcc={this.handleColorChange} />\n              <br />\n              <SortMethod\n                cm={this.state.currentMode}\n                hmc={this.handleModeChange}\n              />\n              <Actions hr={this.handleReset} />\n            </OffcanvasBody>\n          </Offcanvas>\n        </div>\n        <div>\n          <Lines\n            cnt={this.state.currentRangeValue}\n            color={this.state.color}\n            cm={this.state.currentMode}\n            gna={this.state.genNewAsked}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from './components/main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div style={{display:\"flex\", flexDirection:\"column\"}}>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n); "],"sourceRoot":""}